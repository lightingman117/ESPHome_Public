substitutions:
  name: z-shelly-rgbw2
  friendly_name: "z Shelly RGBW2"





  mode_restore: RESTORE_DEFAULT_OFF #RESTORE_DEFAULT_OFF #ALWAYS_OFF #ALWAYS_ON

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
            

esp8266:
  board: esp01_1m



# Enable Home Assistant API
api:
  encryption:
    key: !secret esphome_api_password

# Enable OTA updates
ota:
  - platform: esphome
    password: !secret esphome_ota_password

wifi:
  #
  
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${friendly_name}
    password: !secret fallback_password

web_server:
  version: 3

##########################################################################################################################################################

captive_portal:

# Enable logging
logger:
  baud_rate: 0 # (UART logging interferes with cse7766)
  logs:
    sensor: DEBUG # (Overide any global setting, to VERBOSE will spamming the cse7766 sensors)

time:
  - platform: sntp #(required for total_daily_energy)
    id: my_time
  
  ##########################################################################################################################################################

light:
  - platform: rgbw
    name: "Light"
    id: motion_light
    red: ch_r
    green: ch_g
    blue: ch_b
    white: ch_w
    restore_mode: RESTORE_DEFAULT_OFF

# Example output entry
output:
  - platform: esp8266_pwm
    id: ch_r
    pin: GPIO12
    frequency: 500 Hz
  - platform: esp8266_pwm
    id: ch_g
    pin: GPIO15
    frequency: 500 Hz
  - platform: esp8266_pwm
    id: ch_b
    pin: GPIO14
    frequency: 500 Hz
  - platform: esp8266_pwm
    id: ch_w
    pin: GPIO4
    frequency: 500 Hz
    #min_power: 0.005
    #max_power: 0.90
    #zero_means_zero: true

# This is the delay time you can tune from 1s to 10min (600s)
number:
  - platform: template
    name: "Light Off Delay"
    id: light_delay
    min_value: 1
    max_value: 600
    step: 1
    unit_of_measurement: "s"
    optimistic: true  # Enable optimistic mode
    restore_value: true
    initial_value: 10  # default to 10sec

  - platform: template
    name: "Fade On Time"
    id: fade_on_time
    min_value: 0
    max_value: 10
    step: 0.5
    unit_of_measurement: "s"
    optimistic: true
    restore_value: true
    initial_value: 1

  - platform: template
    name: "Fade Off Time"
    id: fade_off_time
    min_value: 0
    max_value: 10
    step: 0.5
    unit_of_measurement: "s"
    optimistic: true
    restore_value: true
    initial_value: 2

button:
  - platform: template
    name: "Trigger Motion Light"
    on_press:
      then:
        - script.execute: motion_light_timer

binary_sensor:    
  - platform: gpio
    name: "Button State"
    device_class: motion
    id: button_1_raw
    pin: 
      number: GPIO5 #mode not needed
    on_press:
      then:
        - logger.log: "Motion detected"
        - script.execute: motion_light_timer

script:
  - id: motion_light_timer
    mode: restart  # this makes it reset if triggered again
    then:
      - light.turn_on:
          id: motion_light
          transition_length: !lambda 'return id(fade_on_time).state * 1000;'
      - delay: !lambda 'return (int(id(light_delay).state) * 1000);'
      - light.turn_off:
          id: motion_light
          transition_length: !lambda |-
            float s = id(fade_off_time).state;
            float b = id(motion_light).current_values.get_brightness();

            // Tuned plane coefficients (from your 9-point dataset)
            float fade = 0.5 + 0.5 * s + 1.5 * b + 0.4 * s * b;

            // Clamp minimum
            if (fade < 1.0) fade = 1.0;

            return fade * 1000; // convert to milliseconds
      
text_sensor:
  - platform: version
    name: "ESPHome Version"

  - platform: wifi_info
    ip_address:
      name: "IP Address"

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

  - platform: uptime
    name: "Uptime"
    update_interval: 60s

  - platform: adc
    pin: A0
    name: "adc"
    update_interval: 1s
    accuracy_decimals: 4
    id: current_raw
    internal: true

  - platform: template
    name: "power"
    id: my_power
    update_interval: 5s
    unit_of_measurement: W
    accuracy_decimals: 1
    device_class: power
    lambda: return id(current_raw).state;
    filters:
      - calibrate_linear:
        - 0.39355	-> 0
        - 0.39453	-> 0.8
        - 0.39648	-> 3.4
        - 0.40332	-> 8.6
        - 0.40527	-> 11.5
        - 0.40723	-> 14.6
        - 0.41406	-> 17.0
        - 0.42285	-> 24.9
        - 0.42773	-> 29.6
        - 0.43164	-> 35.7
        - 0.4375	-> 39.5
        - 0.44531	-> 47.1
        - 0.46289	-> 64.0
      - throttle_average: 1s
      - lambda: if (x < (0.8 - 0.5)) return 0; else return (x - 0.5);
      

  - platform: total_daily_energy
    name: "Total Daily Energy"
    power_id: my_power
    filters:
          # Multiplication factor from W to kW is 0.001
          - multiply: 0.001
    unit_of_measurement: kW

status_led:
  pin:
    number: GPIO2 #blue status led
    inverted: yes #turn annoying led off
